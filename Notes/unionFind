class unionFind {
private:
    int count;
    vector<int> parent;

public:
    unionFind(int _count) {
        count = _count;
        parent = vector<int>(_count);

        for (int i = 0; i < _count; i++) {
            parrent[i] = i;
        }
    }

    int root(int node) {
        if (parrent[node] != node) {
            parrent[node] = root(parrent[node]);
        }

        return parrent[node];
    }

    void unionNodes(int node1, int node2) {
        int root1 = root(node1), root2 = root(node2);

        if (root1 == root2) {return;}

        parrent[root2] = root1;
        count--;
    }

    bool connected(int node1, int node2) {
        return root(node1) == root(node2);
    }

    int _count() {return count;}
};
